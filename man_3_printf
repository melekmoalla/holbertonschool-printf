.\" Manpage for man_3_printf.
.\" Contact melekmoalla2468@gmail.com to correct errors or typos.
.TH man_3_printf "11 nov 2022" "1.0" "man_3_printf man page"
.SH NAME top
 #include <stdio.h>

       int _printf(const char *format, ...);


       
.SH DESCRIPTION         top

       The functions in the _printf() family produce output according to
       a format as described below.  The functions printf() 
        write output to stdout, the standard output stream;
        write to the character string str.

       The function _printf write at most size bytes
       (including the terminating null byte ('\0')) to str.

       The functions _printf() respectively, except that they
       are called with a va_list instead of a variable number of
       arguments.  These functions do not call the va_end macro.
       Because they invoke the va_arg macro, the value of ap is
       undefined after the call.  See stdarg(3).

       All of these functions write the output under the control of a
       format string that specifies how subsequent arguments (or
       arguments accessed via the variable-length argument facilities of
       stdarg(3)) are converted for output.

   - Format of the format string

       The format string is a character string, beginning and ending in
       its initial shift state, if any.  The format string is composed
       of zero or more directives: ordinary characters (not %), which
       are copied unchanged to the output stream; and conversion
       specifications, each of which results in fetching zero or more
       subsequent arguments.  Each conversion specification is
       introduced by the character %, and ends with a conversion
       specifier.  In between there may be (in this order) zero or more
       flags, an optional minimum field width, an optional precision and
       an optional length modifier.

       The overall syntax of a conversion specification is:

           %[$][flags][width][.precision][length modifier]conversion

       

       are equivalent.  The second style allows repeated references to
       the same argument.  The C99 standard does not include the style
       using '$', which comes from the Single UNIX Specification.  If
       the style using '$' is used, it must be used throughout for all
       conversions taking an argument and all width and precision
       arguments, but it may be mixed with "%%" formats, which do not
       consume an argument.  There may be no gaps in the numbers of
       arguments specified using '$'; for example, if arguments 1 and 3
       are specified, argument 2 must also be specified somewhere in the
       format string.



   - Flag characters

       The character % is followed by zero or more of the following
       flags:

       0      The value should be zero padded.  For d, i
              conversions, the converted value
              is padded on the left with zeros rather than blanks.  If
              the 0 and - flags both appear, the 0 flag is ignored.  If
              a precision is given with a numeric conversion (d, i)
             the 0 flag is ignored.  For other
              conversions, the behavior is undefined.

       -      The converted value is to be left adjusted on the field
              boundary.  (The default is right justification.)  The
              converted value is padded on the right with blanks, rather
              than on the left with blanks or zeros.  A - overrides a 0
              if both are given.




       the flag characters above are defined in the C99 standard.
       The Single UNIX Specification specifies one further flag
       character.

       glibc 2.2 adds one further flag character.


   - Conversion specifiers

       A character that specifies the type of conversion to be applied.
       The conversion specifiers and their meanings are:

       d, i   The int argument is converted to signed decimal notation.
              The precision, if any, gives the minimum number of digits
              that must appear; if the converted value requires fewer
              digits, it is padded on the left with zeros.  The default
              precision is 1.  When 0 is printed with an explicit
              precision 0, the output is empty.

       c      If no l modifier is present, the int argument is converted
              to an unsigned char, and the resulting character is
              written.  If an l modifier is present, the wint_t (wide
              character) argument is converted to a multibyte sequence
              by a call to the wcrtomb(3) function, with a conversion
              state starting in the initial state, and the resulting
              multibyte string is written.

       s      If no l modifier is present: the const char * argument is
              expected to be a pointer to an array of character type
              (pointer to a string).  Characters from the array are
              written up to (but not including) a terminating null byte
              ('\0'); if a precision is specified, no more than the
              number specified are written.  If a precision is given, no
              null byte need be present; if the precision is not
              specified, or is greater than the size of the array, the
              array must contain a terminating null byte.

              If an l modifier is present: the const wchar_t * argument
              is expected to be a pointer to an array of wide
              characters.  Wide characters from the array are converted
              to multibyte characters (each by a call to the wcrtomb(3)
              function, with a conversion state starting in the initial
              state before the first wide character), up to and
              including a terminating null wide character.  The
              resulting multibyte characters are written up to (but not
              including) the terminating null byte.  If a precision is
              specified, no more bytes than the number specified are
              written, but no partial multibyte characters are written.
              Note that the precision determines the number of bytes
              written, not the number of wide characters or screen
              positions.  The array must contain a terminating null wide
              character, unless a precision is given and it is so small
              that the number of bytes written exceeds it before the end
              of the array is reached.

       %      '%' is written.  No argument is converted.  The complete
              conversion specification is '%%'.

.SH RETURN VALUE         top

       Upon successful return, these functions return the number of
       characters printed (excluding the null byte used to end output to
       strings).

       The functions snprintf() and vsnprintf() do not write more than
       size bytes (including the terminating null byte ('\0')).  If the
       output was truncated due to this limit, then the return value is
       the number of characters (excluding the terminating null byte)
       which would have been written to the final string if enough space
       had been available.  Thus, a return value of size or more means
       that the output was truncated.  (See also below under NOTES.)

       If an output error is encountered, a negative value is returned.

.SH ATTRIBUTES         top

       For an explanation of the terms used in this section, see
       attributes(7).

       ┌───────────────────────────────┬───────────────┬────────────────┐
       │Interface                      │ Attribute     │ Value          │
       ├───────────────────────────────┼───────────────┼────────────────┤
       │printf()                       │ Thread safety │ MT-Safe locale │
       └───────────────────────────────┴───────────────┴────────────────┘

.sh CONFORMING TO         top

        _printf()

       Concerning the return value of  return value less than 1, while
       C99 allows str to be NULL in this case, and gives the return
       value (as always) as the number of characters that would have
       been written in case the output string has been large enough.

.SH NOTES         top
       
       in function _printf() and all file linked by printf are use putchar
       because the methode of printf is to display character by caracter 

.SH BUGS         top
 
       Code such as printf(foo); often indicates a bug, since foo may
       contain a % character.  If foo comes from untrusted user input,
       it may contain %n, causing the printf() call to write to memory
       and creating a security hole.

.SH EXAMPLES         top

    #include "main.h"


    /**
    * main - Entry point
    *
    * Return: 0 on success, error code otherwise
    */

    int main(void)
    {
    int len, len2;

    len = _printf("%c", 'S');
    len2 = printf("%c", 'S');
    fflush(stdout);
    if (len != len2)
    {
        printf("Lengths differ.\n");   
        fflush(stdout);
        return (1);
    }
    return (0);
    }

        -------------------------------------
    output: 

    ss

    *****************************************************

    #include "main.h"

    /**
    * main - Entry point
    *
    * Return: 0 on success, error code otherwise
    */

    int main(void)
    {
    int len, len2;

    len = _printf("%s", "This sentence is retrieved from va_args!\n");
    len2 = printf("%s", "This sentence is retrieved from va_args!\n");
    fflush(stdout);
    if (len != len2)
    {
          printf("Lengths differ.\n");
          fflush(stdout);
          return (1);
    }
    return (0);
    }
        ------------------------------------
    output:

    This sentence is retrieved from va_args!

    This sentence is retrieved from va_args!

    *****************************************************
     #include "main.h"

    /**
    * main - Entry point
    *
    * Return: 0 on success, error code otherwise
    */
    int main(void)
    {
        int len, len2;

        len = _printf("%%");
        len2 = printf("%%");
        fflush(stdout);
        if (len != len2)
        {
            printf("Lengths differ.\n");
            fflush(stdout);
            return (1);
        }
        return (0);
    }
        ----------------------------------------
    output:

    %%

    *****************************************************
    #include <stdio.h>
    #include <stdlib.h>
    #include <limits.h>
    #include "main.h"

    /**
    * main - Entry point
    *
    * Return: 0 on success, error code otherwise
    */
    int main(void)
    {
        int len, len2;

        len = _printf("%d == %i\n", 1024, 1024);
        len2 = printf("%d == %i\n", 1024, 1024);
        fflush(stdout);
        if (len != len2)
        {
            printf("Lengths differ.\n");
            fflush(stdout);
            return (1);
        }
        return (0);
    }
        -----------------------------------
    output:

    1024 == 1024
    1024 == 1024

    *****************************************************

SEE ALSO         top

       printf(1), asprintf(3), puts(3), scanf(3), setlocale(3),
       strfromd(3), wcrtomb(3), wprintf(3), locale(5)
COLOPHON         top

       This page is part of release melek moalla  of the Linux man-pages project.
       A description of the project, information about reporting bugs,
       and the latest version of this page, can be found at
       https://github.com/melekmoalla

GNU                            2022-11-11                      _PRINTF